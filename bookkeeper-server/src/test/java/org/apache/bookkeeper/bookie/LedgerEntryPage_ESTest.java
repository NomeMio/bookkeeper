/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 02 14:14:19 GMT 2025
 */

package org.apache.bookkeeper.bookie;

import org.evosuite.runtime.TooManyResourcesException;
import org.junit.AssumptionViolatedException;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import java.lang.annotation.Annotation;
import java.nio.ByteBuffer;


public class LedgerEntryPage_ESTest  {

   public static void verifyException(String sourceClass, Throwable t) throws AssertionError {
    if (t instanceof AssumptionViolatedException) {
        throw (AssumptionViolatedException) t;
    }
    if (t instanceof TooManyResourcesException) {
        throw (TooManyResourcesException) t;
    }
    assertThrownBy(sourceClass, t);
}

public static void assertThrownBy(String sourceClass, Throwable t) throws AssertionError {
    StackTraceElement[] stackTrace = t.getStackTrace();
    if (stackTrace.length == 0) return;
    StackTraceElement el = stackTrace[0];
    if (sourceClass == null) return;
    String name = el.getClassName();
    if (sourceClass.equals(name)) return;
    try {
        Class<?> klass = Class.forName(sourceClass);
        Annotation[] annotations = klass.getAnnotations();
        for (Annotation annotation : annotations) {
            if (annotation.annotationType().getName().equals(name)) return;
        }
        Class<?> current = klass.getSuperclass();
        while (current != null) {
            if (current.getName().equals(name)) return;
            current = current.getSuperclass();
        }
    } catch (ClassNotFoundException e) {
        throw new AssertionError("Cannot load/analyze class " + sourceClass);
    }
    if ("java.lang.System".equals(name)) return;
    throw new AssertionError("Exception was not thrown in " + sourceClass + " but in " + el + ": " + t);
}


  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(3, (-484));
      LedgerEntryPage.EntryVisitor ledgerEntryPage_EntryVisitor0 = mock(LedgerEntryPage.EntryVisitor.class);
      ledgerEntryPage0.getEntries(ledgerEntryPage_EntryVisitor0);
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 3164);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.setLedgerAndFirstEntry(0L, (-459L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -459 is not a multiple of 3164
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 237);
      ledgerEntryPage0.setOffset(9L, 19);
      assertEquals(2, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1, 3);
      ledgerEntryPage0.setClean(3);
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(233, 2833);
      LedgerEntryPage ledgerEntryPage1 = new LedgerEntryPage(834, 2833);
      boolean boolean0 = ledgerEntryPage0.equals(ledgerEntryPage1);
      assertTrue(boolean0);
      assertFalse(ledgerEntryPage1.inUse());
      assertEquals(0, ledgerEntryPage1.getVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      assertFalse(ledgerEntryPage0.inUse());
      
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.zeroPage();
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      assertFalse(ledgerEntryPage0.inUse());
      
      ledgerEntryPage0.usePage();
      ByteBuffer byteBuffer0 = ledgerEntryPage0.getPageToWrite();
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=92 cap=92]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1, 3);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.close();
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1282, 1666);
      ledgerEntryPage0.markDeleted();
      boolean boolean0 = ledgerEntryPage0.isDeleted();
      assertEquals(1, ledgerEntryPage0.getVersion());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      ledgerEntryPage0.setClean((-176));
      boolean boolean0 = ledgerEntryPage0.isClean();
      assertFalse(boolean0);
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(2, 0);
      ledgerEntryPage0.markDeleted();
      int int0 = ledgerEntryPage0.getVersion();
      assertTrue(ledgerEntryPage0.isDeleted());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      assertFalse(ledgerEntryPage0.inUse());
      
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.getOffset(237);
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 237);
      long long0 = ledgerEntryPage0.getOffset(237);
      assertEquals(1, ledgerEntryPage0.getVersion());
      assertEquals(1944L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(2, 1);
      long long0 = ledgerEntryPage0.getMaxPossibleEntry();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(16, 0);
      long long0 = ledgerEntryPage0.getMaxPossibleEntry();
      assertEquals((-1L), long0);
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.setLedgerAndFirstEntry(0L, 1944);
      long long0 = ledgerEntryPage0.getLedger();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertEquals(0L, long0);
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(16, 16);
      ledgerEntryPage0.setLedgerAndFirstEntry(16, 16);
      long long0 = ledgerEntryPage0.getLedger();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1, 1);
      long long0 = ledgerEntryPage0.getLedger();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 237);
      long long0 = ledgerEntryPage0.getLastEntry();
      assertEquals(1, ledgerEntryPage0.getVersion());
      assertEquals(28L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.setLedgerAndFirstEntry(0L, 0L);
      long long0 = ledgerEntryPage0.getFirstEntryPosition();
      assertEquals(0L, long0);
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      ledgerEntryPage0.setLedgerAndFirstEntry((-55L), 92);
      long long0 = ledgerEntryPage0.getFirstEntryPosition();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(736L, long0);
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(16, 16);
      ledgerEntryPage0.setLedgerAndFirstEntry(16, 16);
      long long0 = ledgerEntryPage0.getFirstEntry();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      long long0 = ledgerEntryPage0.getFirstEntry();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals((-1L), long0);
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      ledgerEntryPage0.setLedgerAndFirstEntry(92, (-96L));
      EntryKey entryKey0 = ledgerEntryPage0.getEntryKey();
      assertEquals(92L, entryKey0.getLedgerId());
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertEquals((-96L), entryKey0.getEntryId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      ledgerEntryPage0.setLedgerAndFirstEntry(0L, 0);
      ledgerEntryPage0.getEntryKey();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      ledgerEntryPage0.usePage();
      // Undeclared exception!
      try { 
        ledgerEntryPage0.setOffset(2, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.releasePageNoCallback();
      // Undeclared exception!
      try { 
        ledgerEntryPage0.setOffset(2, 92);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.setLedgerAndFirstEntry(1000L, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  /*@Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2145965991;
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(2145965991, 20, (LEPStateChangeCallback) null);
      // Undeclared exception!
      ledgerEntryPage0.resetPage();
  }*/

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(3, 3, (LEPStateChangeCallback) null);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.releasePage();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Use count has gone below 0
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(8, 8);
      ledgerEntryPage0.usePage();
      // Undeclared exception!
      try { 
        ledgerEntryPage0.readPage((FileInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1024, 1024);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.readPage((FileInfo) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1509, 1509);
      ledgerEntryPage0.usePage();
      // Undeclared exception!
      try { 
        ledgerEntryPage0.getOffset((-49));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1, 1);
      ledgerEntryPage0.usePage();
      // Undeclared exception!
      try { 
        ledgerEntryPage0.getLastEntry();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 237);
      try { 
        ledgerEntryPage0.getEntries((LedgerEntryPage.EntryVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = null;
      try {
        ledgerEntryPage0 = new LedgerEntryPage((-1), (-1), (LEPStateChangeCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -1
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = null;
      try {
        ledgerEntryPage0 = new LedgerEntryPage((-176), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -176
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = LedgerEntryPage.getIndexEntrySize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.getOffset(237);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 237);
      LedgerEntryPage.EntryVisitor ledgerEntryPage_EntryVisitor0 = mock(LedgerEntryPage.EntryVisitor.class);
      doReturn(false).when(ledgerEntryPage_EntryVisitor0).visit(anyLong() , anyLong());
      ledgerEntryPage0.getEntries(ledgerEntryPage_EntryVisitor0);
      assertEquals(1, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      LedgerEntryPage.EntryVisitor ledgerEntryPage_EntryVisitor0 = mock(LedgerEntryPage.EntryVisitor.class);
      ledgerEntryPage0.getEntries(ledgerEntryPage_EntryVisitor0);
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 2);
      long long0 = ledgerEntryPage0.getLastEntry();
      assertEquals(1, ledgerEntryPage0.getVersion());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      assertFalse(ledgerEntryPage0.inUse());
      
      ledgerEntryPage0.usePage();
      long long0 = ledgerEntryPage0.getLastEntry();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.getLastEntry();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      assertFalse(ledgerEntryPage0.inUse());
      
      ledgerEntryPage0.usePage();
      boolean boolean0 = ledgerEntryPage0.inUse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1024, 1024);
      boolean boolean0 = ledgerEntryPage0.inUse();
      assertFalse(boolean0);
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.setLedgerAndFirstEntry(0L, 3358L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3358 is not a multiple of 1944
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1, 3);
      ledgerEntryPage0.setLedgerAndFirstEntry((-1473L), 414L);
      EntryKey entryKey0 = ledgerEntryPage0.getEntryKey();
      assertEquals(414L, entryKey0.getEntryId());
      assertEquals((-1473L), entryKey0.getLedgerId());
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1944, 237);
      ledgerEntryPage0.setOffset(1944, 237);
      assertEquals(2, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      ledgerEntryPage0.setClean(0);
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      Object object0 = new Object();
      boolean boolean0 = ledgerEntryPage0.equals(object0);
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(boolean0);
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.releasePage();
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      assertFalse(ledgerEntryPage0.inUse());
      
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.releasePage();
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      ledgerEntryPage0.resetPage();
      assertFalse(ledgerEntryPage0.isDeleted());
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.zeroPage();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      boolean boolean0 = ledgerEntryPage0.isClean();
      assertTrue(boolean0);
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      long long0 = ledgerEntryPage0.getFirstEntryPosition();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals((-8L), long0);
      assertEquals(0, ledgerEntryPage0.getVersion());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(92, 2);
      int int0 = ledgerEntryPage0.getVersion();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1941, 1941);
      ledgerEntryPage0.getEntriesIterator();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1944, 1944);
      long long0 = ledgerEntryPage0.getMaxPossibleEntry();
      assertFalse(ledgerEntryPage0.inUse());
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertEquals(1943L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1, 1);
      try { 
        ledgerEntryPage0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Use count has gone below 0
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1941, 1941);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.getPageToWrite();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1941, 1941);
      LedgerEntryPage.EntryVisitor ledgerEntryPage_EntryVisitor0 = mock(LedgerEntryPage.EntryVisitor.class);
      try { 
        ledgerEntryPage0.getEntries(ledgerEntryPage_EntryVisitor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Page not marked in use
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(0, 0);
      // Undeclared exception!
      try { 
        ledgerEntryPage0.releasePageNoCallback();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Use count has gone below 0
         //
         verifyException("org.apache.bookkeeper.bookie.LedgerEntryPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1985, 1985);
      ledgerEntryPage0.hashCode();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1941, 1941);
      String string0 = ledgerEntryPage0.toString();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertEquals("-1@-1 clean 0", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1941, 1941);
      ledgerEntryPage0.isDeleted();
      assertEquals(0, ledgerEntryPage0.getVersion());
      assertFalse(ledgerEntryPage0.inUse());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LedgerEntryPage ledgerEntryPage0 = new LedgerEntryPage(1941, 1941);
      ledgerEntryPage0.usePage();
      ledgerEntryPage0.setOffset(1941, 237);
      ledgerEntryPage0.toString();
      assertEquals(1, ledgerEntryPage0.getVersion());
  }
}
